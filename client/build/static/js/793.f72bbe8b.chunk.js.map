{"version":3,"file":"static/js/793.f72bbe8b.chunk.js","mappings":"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","sources":["components/analytics/EmotionDistributionChart.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nconst getToken = () => localStorage.getItem('token') || sessionStorage.getItem('token');\r\nconst getUserId = () => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) return null;\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    return payload.userId || null;\r\n  } catch (e) {\r\n    console.error('Error extracting userId from token:', e);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst colorMap = {\r\n  anger: '#ef4444',\r\n  sadness: '#3b82f6',\r\n  fear: '#f97316',\r\n  shame: '#a855f7',\r\n  disgust: '#10b981'\r\n};\r\n\r\nconst EmotionDistributionChart = () => {\r\n  const [selectedPeriod, setSelectedPeriod] = useState('week');\r\n  const userId = useMemo(() => getUserId(), []);\r\n\r\n  const { data, isLoading, error } = useQuery({\r\n    queryKey: ['emotion-distribution', selectedPeriod, userId],\r\n    queryFn: async () => {\r\n      const token = getToken();\r\n      const response = await fetch(`/api/insights/${userId}/emotional-distribution?period=${selectedPeriod}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      const result = await response.json();\r\n      if (!result.success) throw new Error('Failed to load emotional distribution data');\r\n      return result.data;\r\n    },\r\n    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes\r\n    cacheTime: 30 * 60 * 1000, // Keep unused data in cache for 30 minutes\r\n    retry: 2\r\n  });\r\n\r\n  if (isLoading) {\r\n    return <div className=\"chart-loading\">Loading emotional distribution...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-card error-card--warning\">\r\n      <div className=\"error-card__content\">\r\n        <div className=\"error-card__icon\">ðŸ“Š</div>\r\n        <div className=\"error-card__text\">\r\n          <p className=\"error-card__message\">{error.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n  }\r\n\r\n  if (!data?.length || data.every(e => e.value === 0)) {\r\n    return (\r\n      <div className=\"empty-emotion-distribution\">\r\n        <div className=\"empty-state-message\" style={{ textAlign: 'center' }}>\r\n          <h4>No emotional distribution data yet</h4>\r\n          <p>Share more about how you're feeling to see your emotional breakdown.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"section-header-simple\">\r\n        <h3>Emotional Distribution</h3>\r\n        <p>breakdown of your emotional states</p>\r\n      </div>\r\n      <div className=\"pie-chart-container\">\r\n        <ResponsiveContainer width=\"100%\" height={400} aspect={2}>\r\n          <PieChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\r\n            <Pie\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius={80}\r\n              outerRadius={160}\r\n              dataKey=\"value\"\r\n              nameKey=\"emotion\"\r\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n              labelLine={false}\r\n            >\r\n              {data.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={colorMap[entry.emotion] || '#8884d8'} />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip formatter={(value) => `${value}%`} />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <div className=\"emotion-legend-small\">\r\n        {data.map((emotion) => (\r\n          <div key={emotion.emotion} className=\"emotion-legend-item-small\">\r\n            <div \r\n              className=\"legend-color-small\" \r\n              style={{ backgroundColor: colorMap[emotion.emotion] }}\r\n            />\r\n            <span className=\"legend-label-small\">{emotion.emotion}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"period-selector\" style={{ marginTop: '1rem' }}>\r\n        <button\r\n          onClick={() => setSelectedPeriod('week')}\r\n          className={selectedPeriod === 'week' ? 'active' : ''}\r\n        >\r\n          this week\r\n        </button>\r\n        <button\r\n          onClick={() => setSelectedPeriod('month')}\r\n          className={selectedPeriod === 'month' ? 'active' : ''}\r\n        >\r\n          this month\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(EmotionDistributionChart); "],"names":["getToken","localStorage","getItem","sessionStorage","colorMap","anger","sadness","fear","shame","disgust","EmotionDistributionChart","selectedPeriod","setSelectedPeriod","useState","userId","useMemo","getUserId","token","JSON","parse","atob","split","e","console","error","data","isLoading","useQuery","queryKey","queryFn","async","response","fetch","headers","Authorization","result","json","success","Error","staleTime","cacheTime","retry","_jsx","className","children","_jsxs","message","length","every","value","style","textAlign","_Fragment","ResponsiveContainer","width","height","aspect","PieChart","margin","top","right","bottom","left","Pie","cx","cy","innerRadius","outerRadius","dataKey","nameKey","label","_ref","name","percent","toFixed","labelLine","map","entry","index","Cell","fill","emotion","Tooltip","formatter","backgroundColor","marginTop","onClick","React"],"sourceRoot":""}