{"version":3,"file":"static/js/237.70452df5.chunk.js","mappings":"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","sources":["components/analytics/EmotionalTimelineChart.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nconst getToken = () => localStorage.getItem('token') || sessionStorage.getItem('token');\r\nconst getUserId = () => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) return null;\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    return payload.userId || null;\r\n  } catch (e) {\r\n    console.error('Error extracting userId from token:', e);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst EmotionalTimelineChart = () => {\r\n  const [selectedPeriod, setSelectedPeriod] = useState('week');\r\n  const userId = useMemo(() => getUserId(), []);\r\n\r\n  const { data: timelineData, isLoading, error } = useQuery({\r\n    queryKey: ['emotional-timeline', selectedPeriod, userId],\r\n    queryFn: async () => {\r\n      const token = getToken();\r\n      const response = await fetch(`/api/insights/${userId}/emotional-timeline?period=${selectedPeriod}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      const result = await response.json();\r\n      if (!result.success) throw new Error('Failed to load emotional timeline data');\r\n      return result.data;\r\n    },\r\n    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes\r\n    cacheTime: 30 * 60 * 1000, // Keep unused data in cache for 30 minutes\r\n    retry: 2\r\n  });\r\n\r\n  if (isLoading) {\r\n    return <div className=\"chart-loading\">Loading emotional timeline...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error-card error-card--warning\">\r\n      <div className=\"error-card__content\">\r\n        <div className=\"error-card__icon\">ðŸ“ˆ</div>\r\n        <div className=\"error-card__text\">\r\n          <p className=\"error-card__message\">{error.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n  }\r\n\r\n  const isEmpty = !timelineData?.length || timelineData.every(day =>\r\n    ['anger', 'sadness', 'fear', 'shame', 'disgust'].every(emotion => day[emotion] === 0)\r\n  );\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <div className=\"empty-emotional-timeline\">\r\n        <div className=\"empty-state-message\" style={{ textAlign: 'center' }}>\r\n          <h4>No emotional data yet</h4>\r\n          <p>Share more about how you're feeling to see your emotional timeline.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"section-header-simple\">\r\n        <h3>emotional timeline</h3>\r\n        <p>your emotional patterns over the past {selectedPeriod}</p>\r\n        <div className=\"period-selector\">\r\n          <button\r\n            onClick={() => setSelectedPeriod('week')}\r\n            className={selectedPeriod === 'week' ? 'active' : ''}\r\n          >\r\n            this week\r\n          </button>\r\n          <button\r\n            onClick={() => setSelectedPeriod('month')}\r\n            className={selectedPeriod === 'month' ? 'active' : ''}\r\n          >\r\n            this month\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chart-container\">\r\n        <ResponsiveContainer width=\"100%\" height={400} aspect={2.5}>\r\n          <LineChart data={timelineData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\r\n            <XAxis \r\n              dataKey=\"date\" \r\n              tick={{ fontSize: 12, fill: '#64748b' }}\r\n              tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { weekday: 'short' })}\r\n            />\r\n            <YAxis tick={{ fontSize: 12, fill: '#64748b' }} domain={[0, 10]} />\r\n            <Tooltip \r\n              contentStyle={{ \r\n                backgroundColor: 'white', \r\n                border: '1px solid #e2e8f0', \r\n                borderRadius: '8px',\r\n                fontSize: '14px'\r\n              }}\r\n              labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \r\n                weekday: 'long', \r\n                month: 'short', \r\n                day: 'numeric' \r\n              })}\r\n            />\r\n            <Line type=\"monotone\" dataKey=\"anger\" stroke=\"#ef4444\" strokeWidth={2} dot={{ r: 4 }} name=\"anger\" />\r\n            <Line type=\"monotone\" dataKey=\"sadness\" stroke=\"#3b82f6\" strokeWidth={2} dot={{ r: 4 }} name=\"sadness\" />\r\n            <Line type=\"monotone\" dataKey=\"fear\" stroke=\"#f97316\" strokeWidth={2} dot={{ r: 4 }} name=\"fear\" />\r\n            <Line type=\"monotone\" dataKey=\"shame\" stroke=\"#a855f7\" strokeWidth={2} dot={{ r: 4 }} name=\"shame\" />\r\n            <Line type=\"monotone\" dataKey=\"disgust\" stroke=\"#10b981\" strokeWidth={2} dot={{ r: 4 }} name=\"disgust\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      <div className=\"emotion-legend\">\r\n        {['anger', 'sadness', 'fear', 'shame', 'disgust'].map(emotion => (\r\n          <div key={emotion} className=\"emotion-legend-item\">\r\n            <div className=\"legend-color\" style={{ \r\n              backgroundColor: {\r\n                anger: '#ef4444',\r\n                sadness: '#3b82f6',\r\n                fear: '#f97316',\r\n                shame: '#a855f7',\r\n                disgust: '#10b981'\r\n              }[emotion] \r\n            }}></div>\r\n            <div className=\"legend-text\">\r\n              <div className=\"legend-label\">{emotion}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(EmotionalTimelineChart); "],"names":["getToken","localStorage","getItem","sessionStorage","EmotionalTimelineChart","selectedPeriod","setSelectedPeriod","useState","userId","useMemo","getUserId","token","JSON","parse","atob","split","e","console","error","data","timelineData","isLoading","useQuery","queryKey","queryFn","async","response","fetch","headers","Authorization","result","json","success","Error","staleTime","cacheTime","retry","_jsx","className","children","_jsxs","message","length","every","day","emotion","style","textAlign","_Fragment","onClick","ResponsiveContainer","width","height","aspect","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fontSize","fill","tickFormatter","value","Date","toLocaleDateString","weekday","YAxis","domain","Tooltip","contentStyle","backgroundColor","border","borderRadius","labelFormatter","label","month","Line","type","strokeWidth","dot","r","name","map","anger","sadness","fear","shame","disgust","React"],"sourceRoot":""}